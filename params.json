{"name":"Contact","tagline":"Contact is a language and interactive shell for Riak.","body":"# Contact\r\n\r\n## What is it?\r\n\r\nContact is a language and interactive shell for [Riak](http://basho.com/riak/).\r\n\r\n## Status\r\n\r\nThis is a prototype and ***SHOULD NOT BE USED IN PRODUCTION. I'm actively working on this project, and the language is very likely to change. Many things probably don't work right now.***\r\n\r\nSee the TODO section below.\r\n\r\n## Goals\r\n\r\n1. An easy syntax for all Riak operations\r\n2. An easy way to incorporate text, JSON, XML, Javascript into a Contact script file without escape-character madness.\r\n3. A console that supports simple command completion and history.\r\n4. Extensible object output, conflict resolution and retrier with Javascript (via Mozilla Rhino)\r\n\r\n## Language Grammer\r\n\r\nSee: [Contact.g4](https://github.com/metadave/contact/blob/master/src/com/basho/contact/Contact.g4)\r\n\r\nContact uses an Antlr 4 grammar under the hood for all lexical + semantic goodness.\r\n\r\n\r\n## Building\r\n\r\nBe sure you `JAVA_HOME` is set. You'll need at least JDK 1.6 and Apache Maven to build Contact.\r\n\r\nAt the console, type:\r\n\r\n\tmvn package\r\n\r\n\r\n## Hello world\r\n\r\nAfter you've built Contact, just type:\r\n\r\n\t./contact.sh\r\n\r\n## Help\r\n\r\nAt a Contact console prompt, try one of:\r\n\r\n\thelp \r\n\t\r\n\thelp commands\r\n\t\r\n\thelp <commandname> ## TODO\r\n\r\n***(3/17/2013 - Only `help commands` is supported at the moment.)***\r\n\r\n## Connecting\r\n\r\nTo connect to a Riak instance, use the `connect` command:\r\n\r\n\tconnect \"127.0.0.1\" pb 10017;\r\n\t\r\n`pb` refers to the procol buffers port that Riak is configured to use. Check the `pb_port` \r\nsetting in **app.config** for the exact port to use.\r\n\r\nTo connect to multiple sources:\r\n\r\n\tconnect \"127.0.0.1\" pb 10017 as foo;\r\n\tconnect \"192.168.1.5\" pb 10017 as bar;\r\n\r\nTo use a given connection, you can supply an `@` suffix on most commands:\r\n\r\n\tusing bucket \"Foo\" fetch \"MyKey\" @ foo;\r\n\r\n\r\nTo see a list of connections, use the `connections` commands:\r\n\r\n\tconnections;\r\n\t> connect \"127.0.0.1\" pb 10017 as foo;\r\n\tConnecting to Riak @ 127.0.0.1:10017\r\n\t> connect \"127.0.0.1\" pb 10027 as bar;\r\n\tConnecting to Riak @ 127.0.0.1:10027\r\n\t> connections;\r\n\t<connection:boo:127.0.0.1:10027>\r\n\t<connection:bar:127.0.0.1:10017>\r\n\r\n## Exiting\r\n\r\nTo exit the shell, type `exit`.\r\n\r\n\r\n## Comments\r\n\r\nComments in a script can either be:\r\n\r\n\t/* like this */\r\n\t\r\nor\r\n\r\n\t// like this\r\n\r\n## Use\r\n\r\nTo fetch many objects from a single bucket, you can select a bucket with the `use` command:\r\n\r\n\tuse bucket \"Foo\";\r\n\r\nOtherwise, all commands that require a bucket will need to be prefixed with:\r\n\t\r\n\tusing bucket \"Foo\" â€¦ \r\n\r\n### Use with default options\r\n\r\nYou can specify default options to use for `fetch`, `store`, `delete` and `query2i`. Any\r\noptions you specify in a fetch, store, delete or query2i command will override these defaults.\r\nSee documentation for corresponding commands for available options.\r\n\r\n    use bucket \"Foo\"\r\n            with fetch options r = \"1\"\r\n\r\n\r\n    use bucket \"Foo\"\r\n        with fetch options  r = \"1\"\r\n        and  store options  w = \"1\", dw=\"1\"\r\n        and  delete options foo = \"baz\"\r\n        and query2i options foo = \"bar\";\r\n\r\n\r\n## Fetching Data\r\n\r\nTo fetch a key named \"MyKey\" from bucket \"Foo\", use the following:\r\n\r\n\tusing bucket \"Foo\" fetch \"MyKey\";\r\n\r\nKey and Bucket names are always in double quotes (for now).\r\n\r\n\r\nTo fetch many objects from a single bucket, you can select a bucket with the `use` command:\r\n\r\n\tuse bucket \"Foo\";\r\n\tfetch \"MyKey\";\r\n\tfetch \"MyOtherKey\";\r\n\r\nTo bind a Riak object to a Contact variable:\r\n\r\n\tlet myKey = fetch \"MyKey\";\r\n\r\nOnce you have a binding (\"myKey\" in the example above), you can refer to it from other Contact operations. \r\n(TODO: not much of a use right now)\r\n\t\r\n### Fetching with options\r\n\t\r\n\tfetch \"MyKey\" \r\n\t\twith options \r\n\t\t\tr = 1,\r\n\t\t\tpr = 1;\r\n\r\n\r\n###Available fetch options:\r\n\r\n* r (Integer)\t\r\n* pr (Integer)\r\n* basic_quorum (Boolean)\r\n* notfound_ok (Boolean)\r\n* deletedvclock (Boolean)\r\n\r\n\r\n\r\n## Storing Data\r\n\r\nTo store plain text, json, or xml, you can use the following commands:\r\n\r\n\t/* using \"text\" will set the content-type to text/plain */\t\r\n\tusing bucket \"Foo\" \r\n\t\tstore \"MyKey\" \r\n\t\twith text \"This is text\";\r\n\r\n\t/* using \"json\" will set the content-type to application/json */\r\n\tusing bucket \"Foo\" \r\n\t\tstore \"MyKey\" \r\n\t\twith json \"{foo:bar}\";\r\n\r\n\t/* using \"json\" will set the content-type to application/xml */\r\n\tusing bucket \"Foo\" \r\n\t\tstore \"MyKey\" \r\n\t\twith xml \"This is text\";\r\n\r\nNote, any double quotes appearing in the content string will need to be escaped. To store larger \r\nchunks of text, use a here doc:\r\n\r\n```\r\n// no escaping required!\r\nusing bucket \"Foo\" store \"MyKey\" with text \r\n~%~\r\nThis is \"Free form text\" and doesn't need any escaping!\r\n~%~;\r\n```\r\n\r\n```\r\n// no escaping required!\r\nusing bucket \"Foo\" store \"MyKey\" with json\r\n~%~\r\n{\r\n\t\"person\": {\r\n        \"name\": \"Dave Parfitt\",\r\n        \"city\": \"Buffalo\",\r\n        \"state\": \"NY\"\r\n    \t}\r\n}\r\n~%~;\r\n```\r\n\r\n```\t\r\n// no escaping required!\r\nusing bucket \"Foo\" store \"MyKey\" with xml\r\n~%~\r\n<email>\r\n\t<to>foo@example.com</to>\r\n\t<from>bar@example.com</from>\r\n\t<subject>This is a reminder</subject>\r\n\t<body>Go to the dentist!</body>\r\n</email>\r\n~%~;\t\r\n```\r\n\r\n### Storing with options\r\n\r\n\tusing bucket \"Foo\" \r\n\t\tstore \"MyKey\" \r\n\t\t\twith text \"This is text\" \r\n\t\t\twith options w = 1, pw = 2;\r\n\r\n###Available store options:\r\n\r\n* w (Integer)\r\n* pw (Integer)\r\n* dw (Integer)\r\n* return_body (Boolean)\r\n* if_not_modified (Boolean)\r\n* if_none_match (Boolean)\r\n\r\n## Storing data with secondary indexes\r\n\r\n\tusing bucket \"Foo\" \r\n\t\tstore \"MyKey\" \r\n\t\t\twith index \"twitter_bin\" = \"test\" \r\n\t\t\tand index \"github_bin\" = \"test2\" \r\n\t\t\tand text \"This is text\";\r\n\r\n\tstore \"MyKey\" \r\n\t\t\twith index \"twitter_bin\" = \"test\" \r\n\t\t\tand index \"github_bin\" = \"test2\" \r\n\t\t\tand text \"This is text\";\r\n\r\n## Deleting objects\r\n\r\n\tusing bucket \"Foo\" delete \"MyKey\";\r\n\r\n\tdelete \"MyKey\";\r\n\t\r\n\tdelete \"MyKey\" and options w=\"1\";\r\n\r\n\t\r\n###Available delete options:\r\n\t\r\n* r (Integer)\r\n* w (Integer)\r\n* pr (Integer)\r\n* pw (Integer)\r\n* dw (Integer)\r\n* ***vclock** not implemented at the moment*\r\n\r\n## Secondary Index Query\r\n\r\n**Query names and parameters must always appear in double quotes.**\r\n\r\nSetup sample data with these commands:\r\n\r\n\tusing bucket \"Foo\" \r\n\tstore \"First\" \r\n\twith index \"range_int\" = \"1\" \r\n\tand text \"This is text 1\";\r\n\r\n\tusing bucket \"Foo\" \r\n\tstore \"Last\" \r\n\twith index \"range_int\" = \"2\" \r\n\tand text \"This is text 2\";\r\n\r\nExecute queries like this:\r\n\r\n\tusing bucket \"Foo\" query2i with index \"range_int\" and value \"1\";\r\n\r\nor with `use bucket`:\r\n\r\n\tuse bucket \"Foo\";\r\n\tquery2i with index \"range_int\" and value \"2\";\r\n\tquery2i with index \"range_int\" from \"1\" to \"2\";\r\n\r\n### Secondary Index Query with Fetch\r\n\r\nTo fetch the results of all keys as the result of a 2i query, use the `query2i and fetch` command:\r\n\r\n```\r\nquery2i and fetch with index \"year_int\" and value \"2010\";\r\n```\r\n\t\t\r\nSee [Contact Sample Data](https://github.com/metadave/contact_sample_data) for an example 2i query with custom rendered JSON output.\r\n\t\t\r\n\t\r\n## Map/Reduce\r\n\r\n**NOT IMPLEMENTED** at the moment\r\n\r\nsee [Tease](https://github.com/metadave/tease)\r\n\r\n```\r\nquery \r\n  bucket \"user\" and index \"userid_int\" from 100 to 200\r\n  extract \r\n     $count = 1 and\r\n     $balance = value.balance and\r\n     $group = value.group_name \r\n  aggregate \r\n     group = $group\r\n     count = $count.@sum\r\n     balance = $balance.@sum;\r\n\r\n\r\nquery \r\n     bucket \"invoices\"\r\n     with key filters (ends_with \"0\") and (key.as_int < 10000);\r\n\r\n\r\nquery with\r\n  bucket \"invoices\" \r\n  filter object (invoice.lines.@sum > 1000)\r\n  extract \r\n     $sum = invoice.lines.@sum\r\n  aggregate\r\n     total = $sum.@sum;\r\n     \r\n\r\n\r\n```\r\n\r\n\r\n## Sample Data\r\n\r\nSee the [Contact Sample Data](https://github.com/metadave/contact_sample_data) repository for sample data that can be easily imported.\r\n\r\n\r\n## Customizable Actions and Output\r\n\r\nContact actions and output are customizable via the embedded [Mozilla Rhino Javascript interpreter](https://developer.mozilla.org/en-US/docs/Rhino). Java objects are exposed as Javascript objects, and you have the ability to modify command parameters and output on the fly.  Most actions come in pairs of pre/postcommand. \r\n\r\nHere's an example of the default action for rendering the results of a fetch:\r\n\r\n```\r\nset action postfetch with javascript \r\n~%~\r\n  if(riak_object != undefined) { out.println(riak_object.getValueAsString()); }\r\n~%~;\r\n```\r\n\r\nTo see the code for an action:\r\n\r\n```\r\nget action postfetch;\r\n```\r\n\r\nFor example, to print out the last modified date:\r\n\r\n```\r\nset action postfetch with javascript \r\n~%~\r\n  if(riak_object != undefined) { out.println(riak_object.getLastModified()); }\r\n~%~;\r\n```\r\n\r\nAnd here's a more in depth example that renderes sections of a JSON doc:\r\n\r\n```\r\nuse bucket \"Foo\";\r\n\r\nstore \"JsonTest1\" with json\r\n~%~\r\n  {\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Smith\",\r\n    \"age\": 25,\r\n    \"address\": {\r\n        \"streetAddress\": \"21 2nd Street\",\r\n        \"city\": \"New York\",\r\n        \"state\": \"NY\",\r\n        \"postalCode\": 10021\r\n    }\r\n  }\r\n~%~;\r\n\r\nstore \"JsonTest2\" with json\r\n~%~\r\n  {\r\n    \"firstName\": \"Dave\",\r\n    \"lastName\": \"Parfitt\",\r\n    \"age\": 99,\r\n    \"address\": {\r\n        \"streetAddress\": \"1000 Big Nosk drive\",\r\n        \"city\": \"Buffalo\",\r\n        \"state\": \"NY\",\r\n        \"postalCode\": 14222\r\n    }\r\n  }\r\n~%~;\r\n\r\n\r\nset action postfetch with javascript \r\n~%~\r\nif(riak_object != undefined) { \r\n    var v = riak_object.getValueAsString(); \r\n    var j = JSON.parse(v);\r\n    out.println(j.firstName + \" \" + j.lastName);\r\n    out.println(\"Address:\");\r\n    out.println(\"   \" + j.address.streetAddress);\r\n    out.println(\"   \" + j.address.city + \r\n                    \", \" + j.address.state +\r\n                    \" \" + j.address.postalCode);\r\n}\r\n~%~;\r\n\r\nfetch \"JsonTest1\";\r\nfetch \"JsonTest2\";\r\n```\r\n\r\ndisplays output that looks like this:\r\n\r\n```\r\nJohn Smith\r\nAddress:\r\n   21 2nd Street\r\n   New York, NY 10021\r\n\r\nDave Parfitt\r\nAddress:\r\n   1000 Big Nosk drive\r\n   Buffalo, NY 14222\r\n```\r\n\r\nThe key function in the postfetch action above is `JSON.parse(v)`, which turns evaluates a string and returns a Javascript object.\r\n\r\nI hope to have a \"Cookbook\" section on the Contact wiki eventually, but in the meantime, you can check out the [Javadocs for the Riak Java Client](http://basho.github.com/riak-java-client/1.1.0/index.html) for available methods.\r\n\r\n\r\n####Available actions\r\n\r\nAll scripts have `out` and `err` available to them for writing.\r\n\r\n* All actions have these parameters:\r\n    * out : [java.io.PrintWriter](http://docs.oracle.com/javase/7/docs/api/java/io/PrintWriter.html)\r\n    * err : [java.io.PrintWriter](http://docs.oracle.com/javase/7/docs/api/java/io/PrintWriter.html)\r\n\r\n\r\n* **listkeys**\r\n    * **Pre** parameters\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n    * **Post** parameters\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * keys : *[java.util.List](http://docs.oracle.com/javase/7/docs/api/java/util/List.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)>*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n\r\n* **fetch**\r\n    * **Pre** parameters\r\n        * fetchObj : *[com.basho.riak.client.operations.FetchObject](http://basho.github.com/riak-java-client/1.1.0/com/basho/riak/client/operations/FetchObject.html)<[com.basho.riak.client.IRiakObject](http://basho.github.com/riak-java-client/1.1.0/com/basho/riak/client/IRiakObject.html)>*\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n        * key : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n    * **Post** parameters\r\n        * key : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * riak_object : *[com.basho.riak.client.IRiakObject](http://basho.github.com/riak-java-client/1.1.0/com/basho/riak/client/IRiakObject.html)*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n\r\n* **mapred**\r\n    * **Pre** parameters\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n    * **Post** parameters\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n\r\n* **connect**\r\n    * **Pre** parameters\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * riak_host : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n        * riak_pb_port : *[int]()*\r\n    * **Post** parameters\r\n        * riak_pb_port : *[int]()*\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n        * riak_client : *[com.basho.riak.client.IRiakClient](http://basho.github.com/riak-java-client/1.1.0/com/basho/riak/client/IRiakClient.html)*\r\n        * riak_host : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n\r\n* **store**\r\n    * **Pre** parameters\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * indexes : *[java.util.List](http://docs.oracle.com/javase/7/docs/api/java/util/List.html)<[com.basho.contact.Pair](http://basho.github.com/riak-java-client/1.1.0/com/basho/contact/Pair.html)>*\r\n        * key : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n        * content : *[com.basho.contact.Content](http://basho.github.com/riak-java-client/1.1.0/com/basho/contact/Content.html)*\r\n    * **Post** parameters\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n        * riak_object : *[com.basho.riak.client.IRiakObject](http://basho.github.com/riak-java-client/1.1.0/com/basho/riak/client/IRiakObject.html)*\r\n\r\n* **setbucketprops**\r\n    * **Pre** parameters\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n    * **Post** parameters\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n\r\n* **getbucketprops**\r\n    * **Pre** parameters\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n    * **Post** parameters\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n\r\n* **delete**\r\n    * **Pre** parameters\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n    * **Post** parameters\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n\r\n* **query2i**\r\n    * **Pre** parameters\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * index_max : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * index_min : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n        * index_val : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n        * index_name : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n    * **Post** parameters\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * index_name : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n        * index_val : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * index_max : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n        * index_min : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n        * results : *[java.util.List](http://docs.oracle.com/javase/7/docs/api/java/util/List.html)<?>*\r\n\r\n* **listbuckets**\r\n    * **Pre** parameters\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n    * **Post** parameters\r\n        * options : *[java.util.Map](http://docs.oracle.com/javase/7/docs/api/java/util/Map.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html), [java.lang.Object](http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html)>*\r\n        * buckets : *[java.util.Set](http://docs.oracle.com/javase/7/docs/api/java/util/Set.html)<[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)>*\r\n        * contact : *[com.basho.contact.RuntimeContext]()*\r\n        * bucket : *[java.lang.String](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)*\r\n\r\n### Loading Scripts\r\n\r\nTo load an entire script file, simply execute the `load script` command:\r\n\r\n```\r\n\tload script \"filename.js\";\r\n```\r\n\r\nTo execute arbitrary Javascript:\r\n\r\n```\r\n\tscript \"out.println('hello world');\"\r\n\r\n\t// OR\r\n\t\r\n\tscript ~%~\r\n\t\tout.println(\"hello world!\");\r\n\t~%~;\r\n```\r\n\r\n\r\n\r\n## Customizable Conflict Resolvers and Retriers\r\n\r\n**TODO**\r\n\r\nThese will also be customizable with Javascript.\r\n\r\n\r\n## Listing Buckets\r\n\r\n*Listing buckets should NOT be used on any production system*\r\n\r\n\tlist buckets;\r\n\r\n## Listing Keys\r\n\r\n*Listing keys should NOT be used on any production system*\r\n\r\n\tusing bucket \"Foo\" list keys;\r\n\r\nor\r\n\r\n\tuse bucket \"Foo\";\r\n\tlist keys;\r\n\r\n\r\n## Command Line Parameters\r\n\r\n\t./contact.sh --help\r\n\t\tusage: contact\r\n\t\t    --help                Print this list of commands\r\n\t\t    --infile <filename>   Read input from file and exit\r\n\t\t    --nocolor             Don't use color output\r\n\t\t    --noconfig            Don't read ~/.contact.config\r\n\r\n### Batch mode\r\n\r\nPass in the `--infile <filename>` parameter to contact.sh to process a file containing Contact commands. Contact will exit upon completion. \r\n\r\n## Configuration\r\n\r\nIf you want to run some code upon startup, you can create a file called `~/.contact.config` with \r\nany Contact code you want.\r\n\r\nFor example, if you always connect to the same host, you can add this to the .contact.config file:\r\n\r\n\tconnect \"127.0.0.1\" pb 10017;\r\n\t\r\n## Basic Types\r\n\r\n* Strings: \"This is a string\"   \r\n* Integers: 1000\r\n* Floats: Not implemented\r\n* Boolean: false, true\r\n* Here documents\r\n\r\n```\r\n~%~\r\nAny text between the \"scissor operators\" most likely won't need to be escaped. \r\nThis means you can paste a full XML or JSON document here, and you don't \r\nhave to worry about escaping quotes! Of course, you'll need to escape the scissor operator with: \\~%~\r\n~%~\r\n```\r\n\t\r\n\r\n#TODO\r\n* TESTING TESTING TESTING\r\n* bucket properties via pb\r\n* implement Javascript resolvers + retiers\r\n* clean up mr syntax + implementation\r\n* Riak Search (Yokozuna integration)\r\n* link walking\r\n* load balancing\r\n* user meta\r\n* User content-types\r\n* simple interactive web ui ala \"Try Riak\"\r\n* Fix tab completion\r\n* Pasting text into the shell erroneously kicks off tab completion\r\n\r\n#Contributing\r\n\r\nIf you are a Riak + Java fan, I'm looking for devs to help out.\r\n\r\nFork this repo, create a feature branch using something like this:\r\n\t\r\n\tgit checkout -b branch_name\r\n\t\r\nand submit a pull request. \r\n\r\nPlease send me an email (dparfitt at basho dot com) and let me know if you want to work on any features.\r\n\r\nOnly friendly pull requests accepted:\r\n[Assholes are Ruining Your Project by Donnie Berkholz](http://www.youtube.com/watch?v=-ZSli7QW4rg)\r\n\t\r\n\r\n#License\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0.html\r\n\r\n---\r\n\r\nÂ© 2013 Dave Parfitt\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}