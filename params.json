{"name":"Contact","tagline":"Contact is a language and interactive shell for Riak.","body":"# Contact\r\n\r\n## What is it?\r\n\r\nContact is a language and interactive shell for [Riak](http://basho.com/riak/).\r\n\r\n## Status\r\n\r\nThis is a prototype and ***SHOULD NOT BE USED IN PRODUCTION. I'm actively working on this project, and the language is very likely to change. Many things probably don't work right now.***\r\n\r\nSee the TODO section below.\r\n\r\n## Goals\r\n\r\n1. An easy syntax for all Riak operations\r\n2. An easy way to incorporate text, JSON, XML, Javascript into a Contact script file without escape-character madness.\r\n3. A console that supports simple command completion and history.\r\n4. Extensible object output, conflict resolution and retrier with Javascript (via Mozilla Rhino)\r\n\r\n## Language Grammer\r\n\r\nSee: [Contact.g4](https://github.com/metadave/contact/blob/master/src/com/basho/contact/Contact.g4)\r\n\r\nContact uses an Antlr 4 grammar under the hood for all lexical + semantic goodness.\r\n\r\n\r\n## Building\r\n\r\nBe sure you `JAVA_HOME` is set. You'll need at least JDK 1.6 and Apache Ant to build Contact.\r\n\r\nAt the console, type:\r\n\r\n\tant\r\n\r\nThis will create `contact.jar` in ./dist/lib, which is then referenced from `contact.sh`.\r\n\r\n## Hello world\r\n\r\nAfter you've built Contact, just type:\r\n\r\n\t./contact.sh\r\n\r\n\r\n## Connecting\r\n\r\nTo connect to a Riak instance, use the `connect` command:\r\n\r\n\tconnect \"127.0.0.1\" pb 10017;\r\n\t\r\n`pb` refers to the procol buffers port that Riak is configured to use. Check the `pb_port` \r\nsetting in **app.config** for the exact port to use.\r\n\r\nATM, the only way to exit is by `Ctrl-C`.\r\n\r\n## Use\r\n\r\nTo fetch many objects from a single bucket, you can select a bucket with the `use` command:\r\n\r\n\tuse bucket \"Foo\";\r\n\r\nOtherwise, all commands that require a bucket will need to be prefixed with:\r\n\t\r\n\tusing bucket \"Foo\" â€¦ \r\n\r\n## Fetching Data\r\n\r\nTo fetch a key named \"MyKey\" from bucket \"Foo\", use the following:\r\n\r\n\tusing bucket \"Foo\" fetch \"MyKey\";\r\n\r\nKey and Bucket names are always in double quotes (for now).\r\n\r\n\r\nTo fetch many objects from a single bucket, you can select a bucket with the `use` command:\r\n\r\n\tuse bucket \"Foo\";\r\n\tfetch \"MyKey\";\r\n\tfetch \"MyOtherKey\";\r\n\r\nTo bind a Riak object to a Contact variable:\r\n\r\n\tlet myKey = fetch \"MyKey\";\r\n\r\nOnce you have a binding (\"myKey\" in the example above), you can refer to it from other Contact operations. \r\n(TODO: not much of a use right now)\r\n\t\r\n### Fetching with options\r\n\t\r\n\tfetch \"MyKey\" \r\n\t\twith options \r\n\t\t\t\"r\" = 1, \r\n\t\t\t\"pr\" = 1;\r\n\r\nAll options need to appear between double quotes (for now).\r\n\r\n###Available fetch options:\r\n\r\n* r (Integer)\t\r\n* pr (Integer)\r\n* basic_quorum (Boolean)\r\n* notfound_ok (Boolean)\r\n* deletedvclock (Boolean)\r\n\r\n\r\n\r\n## Storing Data\r\n\r\nTo store plain text, json, or xml, you can use the following commands:\r\n\r\n\tusing bucket \"Foo\" \r\n\t\tstore \"MyKey\" \r\n\t\twith text \"This is text\";\r\n\r\n\tusing bucket \"Foo\" \r\n\t\tstore \"MyKey\" \r\n\t\twith json \"{foo:bar}\";\r\n\r\n\tusing bucket \"Foo\" \r\n\t\tstore \"MyKey\" \r\n\t\twith xml \"This is text\";\r\n\r\nNote, any double quotes appearing in the content string will need to be escaped. To store larger \r\nchunks of text, use a here doc:\r\n\r\n```\r\n// no escaping required!\r\nusing bucket \"Foo\" store \"MyKey\" with text \r\n~%~\r\nThis is \"Free form text\" and doesn't need any escaping!\r\n~%~;\r\n```\r\n\r\n```\r\n// no escaping required!\r\nusing bucket \"Foo\" store \"MyKey\" with json\r\n~%~\r\n{\r\n\t\"person\": {\r\n        \"name\": \"Dave Parfitt\",\r\n        \"city\": \"Buffalo\",\r\n        \"state\": \"NY\"\r\n    \t}\r\n}\r\n~%~;\r\n```\r\n\r\n```\t\r\n// no escaping required!\r\nusing bucket \"Foo\" store \"MyKey\" with xml\r\n~%~\r\n<email>\r\n\t<to>foo@example.com</to>\r\n\t<from>bar@example.com</from>\r\n\t<subject>This is a reminder</subject>\r\n\t<body>Go to the dentist!</body>\r\n</email>\r\n~%~;\t\r\n```\r\n\r\n### Storing with options\r\n\r\n\tusing bucket \"Foo\" \r\n\t\tstore \"MyKey\" \r\n\t\t\twith text \"This is text\" \r\n\t\t\twith options \"w\" = 1, \"pw\" = 2;\r\n\r\n###Available store options:\r\n\r\n* w (Integer)\r\n* pw (Integer)\r\n* dw (Integer)\r\n* return_body (Boolean)\r\n* if_not_modified (Boolean)\r\n* if_none_match (Boolean)\r\n\r\n## Storing data with secondary indexes\r\n\r\n\tusing bucket \"Foo\" \r\n\t\tstore \"MyKey\" \r\n\t\t\twith index \"twitter_bin\" = \"test\" \r\n\t\t\tand index \"github_bin\" = \"test2\" \r\n\t\t\tand text \"This is text\";\r\n\r\n\tstore \"MyKey\" \r\n\t\t\twith index \"twitter_bin\" = \"test\" \r\n\t\t\tand index \"github_bin\" = \"test2\" \r\n\t\t\tand text \"This is text\";\r\n\r\n## Deleting objects\r\n\r\n**NOT IMPLEMENTED** at the moment\r\n\r\n\tusing bucket \"Foo\" delete \"MyKey\";\r\n\r\n\tdelete \"MyKey\";\r\n\r\n### Options\r\n\r\n**Not implemented**\r\n\r\n## Secondary Index Query\r\n\r\n**Query names and parameters must always appear in double quotes.**\r\n\r\nSetup sample data with these:\r\n\r\n\tusing bucket \"Foo\" \r\n\tstore \"First\" \r\n\twith index \"range_int\" = \"1\" \r\n\tand text \"This is text 1\";\r\n\r\n\tusing bucket \"Foo\" \r\n\tstore \"Last\" \r\n\twith index \"range_int\" = \"2\" \r\n\tand text \"This is text 2\";\r\n\r\nExecute queries like this:\r\n\r\n\tusing bucket \"Foo\" query2i with index \"twitter_bin\" and value \"test\";\r\n\tusing bucket \"Foo\" query2i with index \"range_int\" and value \"1\";\r\n\r\nor with `use bucket`:\r\n\r\n\tuse bucket \"Foo\";\r\n\tquery2i with index \"range_int\" and value \"2\";\r\n\tquery2i with index \"range_int\" from \"1\" to \"2\";\r\n\r\n\t\r\n\t\r\n## Map/Reduce\r\n\r\n**NOT IMPLEMENTED** at the moment\r\n\r\nwork in progress, but here's what a M/R query would look like:\r\n\r\n```\r\nmapred \r\n  with inputs\r\n\t\"alice\" = \"p1\", \r\n\t\"alice\" = \"p2\", \r\n\t\"alice\" = \"p3\"\r\n  and phase \r\n    with filters \r\n\tbetween(10,10,\"Foo\") and greater_than(11, false), \r\n\tless_than(100)\r\n  with javascript map  \r\n~%~\r\n\t\tfunction(v) {\r\n\t\t  var m = v.values[0].data.toLowerCase().match(/\\w*/g);\r\n\t\t  var r = [];\r\n\t\t  for(var i in m) {\r\n\t\t    if(m[i] != '') {\r\n\t\t      var o = {};\r\n\t\t      o[m[i]] = 1;\r\n\t\t      r.push(o);\r\n\t\t    }\r\n\t\t  }\r\n\t\t  return r;\r\n\t\t}\r\n~%~\r\nand phase with javascript reduce keep\r\n~%~\r\n\t\tfunction(v) {\r\n\t\t  var r = {};\r\n\t\t  for(var i in v) {\r\n\t\t    for(var w in v[i]) {\r\n\t\t      if(w in r) r[w] += v[i][w];\r\n\t\t      else r[w] = v[i][w];\r\n\t\t    }\r\n\t\t  }\r\n\t\t  return [r];\r\n\t\t}\r\n~%~\r\n;\t\r\n```\r\n\r\n## Customizable Output\r\n\r\nThere are customizable actions via Javascript for most Contact commands. They come in pairs of pre/postcommand. \r\n\r\nHere's an example of the default action for rendering the results of a fetch:\r\n\r\n```\r\nset action postfetch with javascript \r\n~%~\r\n  if(obj != undefined) { out.println(obj.getValueAsString()); }\r\n~%~;\r\n```\r\n\r\nTo see the code for an action:\r\n\r\n```\r\nget action postfetch;\r\n```\r\n\r\n####Available actions:\r\n * prefetch\r\n * postfetch\r\n * prestore\r\n * poststore\r\n * predelete\r\n * postdelete\r\n * prequery2i\r\n * postquery2i\r\n * premapred\r\n * postmapred\r\n * prelistbuckets\r\n * postlistbuckets\r\n * prelistkeys\r\n * postlistkeys\r\n * pregetbucketprops\r\n * postgetbucketprops\r\n\r\n\r\n\r\n\r\n## Customizable Conflict Resolvers and Retriers\r\n\r\n**TODO**\r\n\r\nThese will also be customizable with Javascript.\r\n\r\n\r\n## Listing Bucket\r\n\r\n*Listing buckets should NOT be used on any production system*\r\n\r\n\tlist buckets;\r\n\r\n## Listing Keys\r\n\r\n*Listing keys should NOT be used on any production system*\r\n\r\n\tusing bucket \"Foo\" list keys;\r\n\r\nor\r\n\r\n\tuse bucket \"Foo\";\r\n\tlist keys;\r\n\r\n\r\n## Configuration\r\n\r\nIf you want to run some code upon startup, you can create a file called `~/.contact.config` with \r\nany Contact code you want.\r\n\r\nFor example, if you always connect to the same host, you can add this to the .contact.config file:\r\n\r\n\tconnect \"127.0.0.1\" pb 10017;\r\n\t\r\n## Basic Types\r\n\r\n* Strings: \"This is a string\"   \r\n* Integers: 1000\r\n* Floats: Not implemented\r\n* Boolean: false, true\r\n* Here documents\r\n\r\n```\r\n~%~\r\nAny text between the \"scissor operators\" doesn't need to be escaped. \r\nThis means you can paste a full XML or JSON document here, and you don't \r\nhave to worry about escaping quotes! Of course, you'll need to escape the scissor operator with: \\~%~\r\n~%~\r\n```\r\n\t\r\n\r\n#TODO\r\n\r\n* implement Javascript resolvers + retiers\r\n* bucket properties via pb (the HTTP interface code is currently commented out)\r\n* clean up mr syntax + implementation\r\n* link walking\r\n* listing and using shell variables (ie from a 2i query)\r\n* setup connections to multiple clusters, refer to a connection during a fetch, store, etc.\r\n* load balancing\r\n* do I need client ids?\r\n* simple interactive web ui ala \"Try Riak\"\r\n* a way to exit the shell :-)\r\n* Pasting text into the shell erroneously kicks off tab completion\r\n* User content-types\r\n\r\n\r\n#Contributing\r\n\r\nIf you are a Riak + Java fan, I'm looking for devs to help out.\r\n\r\nFork this repo, create a feature branch using something like this:\r\n\t\r\n\tgit checkout -b branch_name\r\n\t\r\nand submit a pull request. \r\n\r\nPlease send me an email (dparfitt at basho dot com) and let me know if you want to work on any features.\r\n\r\nOnly friendly pull requests accepted:\r\n[Assholes are Ruining Your Project by Donnie Berkholz](http://www.youtube.com/watch?v=-ZSli7QW4rg)\r\n\t\r\n\r\n#License\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0.html\r\n\r\n---\r\n\r\nÂ© 2013 Dave Parfitt\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}